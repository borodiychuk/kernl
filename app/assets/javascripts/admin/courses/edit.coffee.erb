angular.module("app.controllers").controller "CoursesEditCtrl", [
  "$scope", "APICourses", "UI", "Table", "COUNTRIES", "$state", "APIUsersTablified", "uiGmapGoogleMapApi", "StateChangeWarner"
  ($scope,   APICourses,   UI,   Table,   COUNTRIES,   $state,   APIUsersTablified,   uiGmapGoogleMapApi,   StateChangeWarner) ->

    $scope.countries = COUNTRIES
    $scope.new = $state.params.course_id is "new"
    StateChangeWarner $scope, "courseForm.$dirty"

    ($scope.reset = ->
      $scope.course = if $scope.new
                        new APICourses
                          tags: []
                          schedule_breakpoints: []
                          billing_method: "grid"
                          created_at: "now" # Need it for map key
                      else
                        APICourses.get id: $state.params.course_id, ->
                          $scope.courseForm.$setPristine() if $scope.courseForm?
    )()

    $scope.save = ->
      $scope.course.schedule_breakpoints_attributes = $scope.course.schedule_breakpoints
      if $scope.new
        $scope.course.$save {}, (data) ->
          $scope.courseForm.$setPristine()
          $state.go "courses.edit", course_id: data.id
      else
        $scope.course.$update {}, $scope.courseForm.$setPristine

    $scope.delete = ->
      UI.confirm ->
        $scope.course.$delete {}, (data) ->
          $state.go "courses.list"

    $scope.users = Table
      type: "partial"
      resource: APIUsersTablified
      params:
        license: "manager"
        limit: 5

    $scope.selectUser = (u) ->
      $scope.course.owner = u
      $scope.course.owner_id = u.id
      $scope.showUsers = false
      $scope.courseForm.$setDirty()

    $scope.addTag = ->
      $scope.course.tags.push ""

    $scope.addBreakpoint = ->
      $scope.course.schedule_breakpoints.push starts_at: null
      $scope.courseForm.$setDirty()

    $scope.deleteBreakpoint = (i) ->
      UI.confirm ->
        $scope.$evalAsync ->
          breakpoint = $scope.course.schedule_breakpoints[i]
          if breakpoint.id?
            breakpoint._destroy = 1
          else
            $scope.course.schedule_breakpoints.splice i, 1
          $scope.courseForm.$setDirty()


    ##
    ##  Map picker
    ##

    # Center the map
    centerMap = (maps) ->
      $scope.$evalAsync ->
        if $scope.course.latitude && $scope.course.longitude
          # For located we point center to a location
          $scope.map.center =
            latitude:  $scope.course.latitude
            longitude: $scope.course.longitude
          $scope.map.zoom = 12
        else
          # for not located we try to locate the center of map to user's location
          if navigator.geolocation && $scope.new
            # If navigation allowed, point him to his place
            navigator.geolocation.getCurrentPosition (position) ->
              location = new maps.LatLng position.coords.latitude, position.coords.longitude
              $scope.map.center =
                latitude:  location.lat()
                longitude: location.lng()
              $scope.map.zoom = 12
          else
            # Otherwise just show Germany
            $scope.map.center =
              latitude:  51.3857028
              longitude: 10.2918209
            $scope.map.zoom = 5

    if $scope.new
      uiGmapGoogleMapApi.then centerMap
    else
      $scope.course.$promise.then -> uiGmapGoogleMapApi.then centerMap

    $scope.map =
      events:
        click: (map, event, details) ->
          $scope.courseForm.$setDirty()
          coordinates = details[0].latLng
          $scope.course.latitude  = coordinates.lat()
          $scope.course.longitude = coordinates.lng()
          map.panTo coordinates
      options:
        disableDoubleClickZoom: false
        scrollwheel: false

    $scope.markerOptions =
      icon: "<%= asset_path "logo-marker.png" %>"

]
